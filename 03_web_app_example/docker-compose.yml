# ===============================================
# DOCKER COMPOSE ДЛЯ ВЕБ-ПРИЛОЖЕНИЯ
# ===============================================
# Этот файл определяет многоконтейнерное приложение
# с веб-сервером, базой данных и кэшем

version: '3.8'

# Определяем сервисы
services:
  # Веб-приложение Flask
  web:
    build: 
      context: .
      dockerfile: Dockerfile
      args:
        APP_ENV: development
    container_name: flask-webapp
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=development
      - DATABASE_URL=postgresql://postgres:password@db:5432/webapp
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=dev-secret-key-change-in-production
    volumes:
      # Монтируем код для разработки (hot reload)
      - .:/app
      # Персистентные данные
      - webapp_logs:/app/logs
      - webapp_uploads:/app/uploads
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - webapp-network
    restart: unless-stopped
    # Команда для режима разработки
    command: flask run --host=0.0.0.0 --debug

  # База данных PostgreSQL
  db:
    image: postgres:15-alpine
    container_name: webapp-postgres
    environment:
      POSTGRES_DB: webapp
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - webapp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis для кэширования и сессий
  redis:
    image: redis:7-alpine
    container_name: webapp-redis
    command: redis-server --appendonly yes --requirepass redispass
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - webapp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redispass", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Nginx как reverse proxy (опционально)
  nginx:
    image: nginx:alpine
    container_name: webapp-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - webapp_logs:/var/log/nginx
    depends_on:
      - web
    networks:
      - webapp-network
    restart: unless-stopped

  # Adminer для управления БД (только для разработки)
  adminer:
    image: adminer
    container_name: webapp-adminer
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: db
    depends_on:
      - db
    networks:
      - webapp-network
    profiles:
      - dev  # Запускается только с профилем dev

# Определяем именованные volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  webapp_logs:
    driver: local
  webapp_uploads:
    driver: local

# Определяем сети
networks:
  webapp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ===============================================
# КОМАНДЫ ДЛЯ УПРАВЛЕНИЯ:
# ===============================================
#
# Запуск всех сервисов:
# docker-compose up -d
#
# Запуск с профилем разработки (включая Adminer):
# docker-compose --profile dev up -d
#
# Сборка и запуск:
# docker-compose up --build
#
# Просмотр логов:
# docker-compose logs -f web
# docker-compose logs -f
#
# Выполнение команд в контейнере:
# docker-compose exec web flask db upgrade
# docker-compose exec web python manage.py create-admin
#
# Масштабирование сервиса:
# docker-compose up --scale web=3
#
# Остановка сервисов:
# docker-compose stop
#
# Полная очистка (с удалением volumes):
# docker-compose down -v --remove-orphans
#
# Просмотр состояния:
# docker-compose ps
# docker-compose top
