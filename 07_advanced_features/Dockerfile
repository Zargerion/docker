# ===============================================
# –ü–†–û–î–í–ò–ù–£–¢–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò DOCKER
# ===============================================
# –≠—Ç–æ—Ç Dockerfile –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ Docker:
# - BuildKit –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
# - Secrets –∏ SSH
# - Cache mounts
# - –£—Å–ª–æ–≤–Ω–∞—è —Å–±–æ—Ä–∫–∞
# - –ö–∞—Å—Ç–æ–º–Ω—ã–µ build contexts

# syntax=docker/dockerfile:1.4
# –í–∫–ª—é—á–∞–µ–º BuildKit –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π

FROM ubuntu:22.04 AS base

# ===============================================
# BUILDKIT FEATURES
# ===============================================

# –ò—Å–ø–æ–ª—å–∑—É–µ–º cache mount –¥–ª—è apt –∫—ç—à–∞
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    apt-get update && apt-get install -y \
    curl \
    wget \
    git \
    python3 \
    python3-pip \
    nodejs \
    npm \
    build-essential

# ===============================================
# SECRETS MANAGEMENT
# ===============================================

# –ò—Å–ø–æ–ª—å–∑—É–µ–º secret –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π
# –°–µ–∫—Ä–µ—Ç –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ --secret id=ssh,src=~/.ssh/id_rsa
RUN --mount=type=secret,id=ssh,target=/root/.ssh/id_rsa,required=false \
    --mount=type=secret,id=known_hosts,target=/root/.ssh/known_hosts,required=false \
    if [ -f /root/.ssh/id_rsa ]; then \
        chmod 600 /root/.ssh/id_rsa && \
        echo "SSH –∫–ª—é—á –Ω–∞–π–¥–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"; \
    else \
        echo "SSH –∫–ª—é—á –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏"; \
    fi

# –ò—Å–ø–æ–ª—å–∑—É–µ–º secret –¥–ª—è API —Ç–æ–∫–µ–Ω–æ–≤
RUN --mount=type=secret,id=api_token,target=/tmp/token,required=false \
    if [ -f /tmp/token ]; then \
        API_TOKEN=$(cat /tmp/token) && \
        echo "API —Ç–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω (–¥–ª–∏–Ω–∞: ${#API_TOKEN})"; \
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
    else \
        echo "API —Ç–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω"; \
    fi

# ===============================================
# CACHE MOUNTS
# ===============================================

# –ò—Å–ø–æ–ª—å–∑—É–µ–º cache mount –¥–ª—è npm –∫—ç—à–∞
COPY package*.json ./
RUN --mount=type=cache,target=/root/.npm \
    npm ci --only=production

# –ò—Å–ø–æ–ª—å–∑—É–µ–º cache mount –¥–ª—è pip –∫—ç—à–∞
COPY requirements.txt ./
RUN --mount=type=cache,target=/root/.cache/pip \
    pip3 install -r requirements.txt

# ===============================================
# BIND MOUNTS
# ===============================================

# –ò—Å–ø–æ–ª—å–∑—É–µ–º bind mount –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–æ–∫–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–∞–º –≤–æ –≤—Ä–µ–º—è —Å–±–æ—Ä–∫–∏
RUN --mount=type=bind,source=.,target=/src,rw \
    if [ -d /src/scripts ]; then \
        cp -r /src/scripts /app/; \
        echo "–°–∫—Ä–∏–ø—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ bind mount"; \
    fi

# ===============================================
# –£–°–õ–û–í–ù–ê–Ø –°–ë–û–†–ö–ê
# ===============================================

# –≠—Ç–∞–ø –¥–ª—è development
FROM base AS development
ARG DEVELOPMENT=false
RUN if [ "$DEVELOPMENT" = "true" ]; then \
        apt-get update && apt-get install -y \
        vim \
        htop \
        strace \
        tcpdump \
        net-tools; \
    fi

# –≠—Ç–∞–ø –¥–ª—è production
FROM base AS production
ARG PRODUCTION=true
RUN if [ "$PRODUCTION" = "true" ]; then \
        apt-get autoremove -y && \
        apt-get clean && \
        rm -rf /var/lib/apt/lists/*; \
    fi

# ===============================================
# HEREDOC SYNTAX (BuildKit 1.4+)
# ===============================================

# –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å –ø–æ–º–æ—â—å—é heredoc
RUN <<EOF
cat > /app/config.json << 'JSON'
{
    "environment": "${NODE_ENV:-production}",
    "features": {
        "buildkit": true,
        "secrets": true,
        "cache_mounts": true,
        "heredoc": true
    },
    "build_info": {
        "timestamp": "$(date -Iseconds)",
        "builder": "BuildKit"
    }
}
JSON
EOF

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
RUN <<'SCRIPT'
cat > /app/init.sh << 'BASH'
#!/bin/bash
set -e

echo "üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–µ–∫—Ä–µ—Ç–æ–≤
if [ -f "/run/secrets/db_password" ]; then
    echo "‚úÖ –°–µ–∫—Ä–µ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω"
    export DB_PASSWORD=$(cat /run/secrets/db_password)
fi

if [ -f "/run/secrets/api_key" ]; then
    echo "‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω"
    export API_KEY=$(cat /run/secrets/api_key)
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ BuildKit –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
echo "üîß BuildKit –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:"
echo "   - Cache mounts: ‚úÖ"
echo "   - Secrets: ‚úÖ"
echo "   - Heredoc: ‚úÖ"
echo "   - Multi-platform: ‚úÖ"

exec "$@"
BASH

chmod +x /app/init.sh
SCRIPT

# ===============================================
# MULTI-PLATFORM SUPPORT
# ===============================================

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TARGETPLATFORM –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ-–∑–∞–≤–∏—Å–∏–º—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
ARG TARGETPLATFORM
ARG BUILDPLATFORM
RUN echo "–°–±–æ—Ä–∫–∞ –Ω–∞: $BUILDPLATFORM –¥–ª—è: $TARGETPLATFORM"

# –£—Å–ª–æ–≤–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
RUN case "$TARGETPLATFORM" in \
    "linux/amd64") \
        echo "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è AMD64"; \
        ;; \
    "linux/arm64") \
        echo "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è ARM64"; \
        ;; \
    "linux/arm/v7") \
        echo "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è ARM v7"; \
        ;; \
    *) \
        echo "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: $TARGETPLATFORM"; \
        ;; \
    esac

# ===============================================
# –§–ò–ù–ê–õ–¨–ù–´–ô –≠–¢–ê–ü
# ===============================================

FROM production AS final

# –ö–æ–ø–∏—Ä—É–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —ç—Ç–∞–ø–æ–≤
COPY --from=development /usr/bin/vim /usr/bin/vim 2>/dev/null || true

WORKDIR /app

# –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
RUN groupadd -r appuser && useradd -r -g appuser -d /app -s /bin/bash appuser
RUN chown -R appuser:appuser /app

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º volumes
VOLUME ["/app/data", "/app/logs", "/app/cache"]

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º healthcheck —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=5 \
    --health-cmd="/app/healthcheck.sh" \
    CMD /app/healthcheck.sh || exit 1

# –°–æ–∑–¥–∞–µ–º healthcheck —Å–∫—Ä–∏–ø—Ç
RUN <<'HEALTHCHECK'
cat > /app/healthcheck.sh << 'BASH'
#!/bin/bash

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
echo "üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
if ! pgrep -f "main_process" > /dev/null; then
    echo "‚ùå –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–æ–≤
if ! nc -z localhost 8080; then
    echo "‚ùå –ü–æ—Ä—Ç 8080 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
MEMORY_USAGE=$(free | awk 'NR==2{printf "%.2f", $3*100/$2}')
if (( $(echo "$MEMORY_USAGE > 90" | bc -l) )); then
    echo "‚ö†Ô∏è  –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${MEMORY_USAGE}%"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
DISK_USAGE=$(df /app | awk 'NR==2{print $5}' | sed 's/%//')
if [ "$DISK_USAGE" -gt 85 ]; then
    echo "‚ö†Ô∏è  –ú–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: ${DISK_USAGE}%"
fi

echo "‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã"
exit 0
BASH

chmod +x /app/healthcheck.sh
HEALTHCHECK

# –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω–µ–ø—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
USER appuser

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º entrypoint
ENTRYPOINT ["/app/init.sh"]
CMD ["python3", "-m", "http.server", "8080"]

# ===============================================
# –ö–û–ú–ê–ù–î–´ –î–õ–Ø –°–ë–û–†–ö–ò –° –ü–†–û–î–í–ò–ù–£–¢–´–ú–ò –í–û–ó–ú–û–ñ–ù–û–°–¢–Ø–ú–ò:
# ===============================================
#
# –í–∫–ª—é—á–µ–Ω–∏–µ BuildKit:
# export DOCKER_BUILDKIT=1
# –∏–ª–∏
# docker buildx create --use
#
# –°–±–æ—Ä–∫–∞ —Å —Å–µ–∫—Ä–µ—Ç–∞–º–∏:
# echo "secret_api_key_12345" | docker build --secret id=api_token,src=- .
# docker build --secret id=ssh,src=$HOME/.ssh/id_rsa .
#
# –°–±–æ—Ä–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º:
# docker buildx build --platform linux/amd64,linux/arm64 -t advanced-demo .
#
# –°–±–æ—Ä–∫–∞ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º build context:
# docker build --build-context scripts=./external-scripts .
#
# –°–±–æ—Ä–∫–∞ —Å —É—Å–ª–æ–≤–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏:
# docker build --build-arg DEVELOPMENT=true --target development .
# docker build --build-arg PRODUCTION=true --target production .
#
# –°–±–æ—Ä–∫–∞ —Å –≤—ã–≤–æ–¥–æ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:
# docker build --metadata-file metadata.json .
#
# –°–±–æ—Ä–∫–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º:
# docker build --cache-from type=registry,ref=myregistry/cache .
# docker build --cache-to type=registry,ref=myregistry/cache .
#
# –ó–∞–ø—É—Å–∫ —Å —Å–µ–∫—Ä–µ—Ç–∞–º–∏:
# echo "db_secret_password" | docker secret create db_password -
# docker service create --secret db_password advanced-demo
