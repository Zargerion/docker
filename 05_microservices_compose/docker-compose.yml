# ===============================================
# МИКРОСЕРВИСНАЯ АРХИТЕКТУРА С DOCKER COMPOSE
# ===============================================
# Этот пример демонстрирует полную микросервисную архитектуру
# с API Gateway, базами данных, кэшированием, мониторингом и логированием

version: '3.8'

services:
  # ===============================================
  # API GATEWAY (NGINX)
  # ===============================================
  api-gateway:
    image: nginx:alpine
    container_name: api-gateway
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - user-service
      - product-service
      - order-service
      - notification-service
    networks:
      - frontend
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===============================================
  # МИКРОСЕРВИСЫ
  # ===============================================
  
  # Сервис пользователей
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    container_name: user-service
    environment:
      - DATABASE_URL=postgresql://userdb_user:userdb_pass@user-db:5432/userdb
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET=user-service-secret
      - SERVICE_NAME=user-service
      - SERVICE_PORT=3001
    volumes:
      - ./services/user-service/logs:/app/logs
    depends_on:
      user-db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend
      - user-db-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Сервис продуктов
  product-service:
    build:
      context: ./services/product-service
      dockerfile: Dockerfile
    container_name: product-service
    environment:
      - DATABASE_URL=mongodb://product-db:27017/productdb
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - SERVICE_NAME=product-service
      - SERVICE_PORT=3002
    volumes:
      - ./services/product-service/logs:/app/logs
      - product-images:/app/images
    depends_on:
      product-db:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    networks:
      - backend
      - product-db-network
      - search-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Сервис заказов
  order-service:
    build:
      context: ./services/order-service
      dockerfile: Dockerfile
    container_name: order-service
    environment:
      - DATABASE_URL=postgresql://orderdb_user:orderdb_pass@order-db:5432/orderdb
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
      - USER_SERVICE_URL=http://user-service:3001
      - PRODUCT_SERVICE_URL=http://product-service:3002
      - SERVICE_NAME=order-service
      - SERVICE_PORT=3003
    volumes:
      - ./services/order-service/logs:/app/logs
    depends_on:
      order-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      user-service:
        condition: service_healthy
      product-service:
        condition: service_healthy
    networks:
      - backend
      - order-db-network
      - message-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Сервис уведомлений
  notification-service:
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile
    container_name: notification-service
    environment:
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
      - SMTP_HOST=mailhog
      - SMTP_PORT=1025
      - SERVICE_NAME=notification-service
      - SERVICE_PORT=3004
    volumes:
      - ./services/notification-service/logs:/app/logs
    depends_on:
      rabbitmq:
        condition: service_healthy
      mailhog:
        condition: service_started
    networks:
      - backend
      - message-network
    restart: unless-stopped

  # ===============================================
  # БАЗЫ ДАННЫХ
  # ===============================================
  
  # PostgreSQL для пользователей
  user-db:
    image: postgres:15-alpine
    container_name: user-db
    environment:
      POSTGRES_DB: userdb
      POSTGRES_USER: userdb_user
      POSTGRES_PASSWORD: userdb_pass
    volumes:
      - user-db-data:/var/lib/postgresql/data
      - ./init-scripts/user-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - user-db-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U userdb_user -d userdb"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL для заказов
  order-db:
    image: postgres:15-alpine
    container_name: order-db
    environment:
      POSTGRES_DB: orderdb
      POSTGRES_USER: orderdb_user
      POSTGRES_PASSWORD: orderdb_pass
    volumes:
      - order-db-data:/var/lib/postgresql/data
      - ./init-scripts/order-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - order-db-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U orderdb_user -d orderdb"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB для продуктов
  product-db:
    image: mongo:6.0
    container_name: product-db
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: adminpass
      MONGO_INITDB_DATABASE: productdb
    volumes:
      - product-db-data:/data/db
      - ./init-scripts/product-db.js:/docker-entrypoint-initdb.d/init.js:ro
    networks:
      - product-db-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ismaster')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ===============================================
  # ИНФРАСТРУКТУРНЫЕ СЕРВИСЫ
  # ===============================================
  
  # Redis для кэширования
  redis:
    image: redis:7-alpine
    container_name: redis
    command: redis-server --appendonly yes --requirepass redis123
    volumes:
      - redis-data:/data
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis123", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # RabbitMQ для сообщений
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    ports:
      - "15672:15672"  # Management UI
    networks:
      - message-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Elasticsearch для поиска
  elasticsearch:
    image: elasticsearch:8.10.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - search-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===============================================
  # МОНИТОРИНГ И ЛОГИРОВАНИЕ
  # ===============================================
  
  # Prometheus для метрик
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - monitoring
      - backend
    restart: unless-stopped

  # Grafana для дашбордов
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - monitoring
    restart: unless-stopped

  # ELK Stack для логов
  elasticsearch-logs:
    image: elasticsearch:8.10.0
    container_name: elasticsearch-logs
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms256m -Xmx256m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch-logs-data:/usr/share/elasticsearch/data
    networks:
      - logging
    restart: unless-stopped

  logstash:
    image: logstash:8.10.0
    container_name: logstash
    volumes:
      - ./logging/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    depends_on:
      - elasticsearch-logs
    networks:
      - logging
      - backend
    restart: unless-stopped

  kibana:
    image: kibana:8.10.0
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch-logs:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch-logs
    networks:
      - logging
    restart: unless-stopped

  # MailHog для тестирования email
  mailhog:
    image: mailhog/mailhog:latest
    container_name: mailhog
    ports:
      - "8025:8025"  # Web UI
      - "1025:1025"  # SMTP
    networks:
      - backend
    restart: unless-stopped

# ===============================================
# VOLUMES
# ===============================================
volumes:
  user-db-data:
  order-db-data:
  product-db-data:
  redis-data:
  rabbitmq-data:
  elasticsearch-data:
  elasticsearch-logs-data:
  prometheus-data:
  grafana-data:
  product-images:

# ===============================================
# NETWORKS
# ===============================================
networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
  user-db-network:
    driver: bridge
    internal: true
  order-db-network:
    driver: bridge
    internal: true
  product-db-network:
    driver: bridge
    internal: true
  message-network:
    driver: bridge
    internal: true
  search-network:
    driver: bridge
    internal: true
  monitoring:
    driver: bridge
  logging:
    driver: bridge

# ===============================================
# КОМАНДЫ ДЛЯ УПРАВЛЕНИЯ МИКРОСЕРВИСАМИ:
# ===============================================
#
# Запуск всей системы:
# docker-compose up -d
#
# Запуск только основных сервисов:
# docker-compose up -d api-gateway user-service product-service order-service user-db product-db order-db redis
#
# Масштабирование сервисов:
# docker-compose up -d --scale user-service=3 --scale product-service=2
#
# Просмотр логов конкретного сервиса:
# docker-compose logs -f user-service
#
# Перезапуск сервиса:
# docker-compose restart user-service
#
# Выполнение команды в контейнере:
# docker-compose exec user-service npm run migrate
#
# Мониторинг ресурсов:
# docker-compose top
# docker stats
#
# Остановка и очистка:
# docker-compose down -v --remove-orphans
#
# Доступные URL:
# - API Gateway: http://localhost
# - Grafana: http://localhost:3000 (admin/admin123)
# - Prometheus: http://localhost:9090
# - Kibana: http://localhost:5601
# - RabbitMQ Management: http://localhost:15672 (admin/admin123)
# - MailHog: http://localhost:8025
# - Elasticsearch: http://localhost:9200
